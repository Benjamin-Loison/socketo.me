{% extends "layout.html.twig" %}

{% import "macros.html.twig" as m %}

{% block title %}Tutorial: Installation{% endblock %}

{% block description %}
  Learn how to easily install Ratchet with Composer
{% endblock %}

{% block body %}
  <div class="container-fluid">
    <div class="row-fluid">

    {{ m.menu() }}

      <div class="span9">
            <h2>Deployment <small>- shippit!</small></h2>

            <section><p>
                You've built your application and are ready to deploy it live!
                This tutorial will give you recommendations on what you should do to setup your production environment to run a WebSocket server. 
                None of these are required, but recommended. 
                Please note this page serves as an introduction and boilerplate setup for each technoloogy; each topic has wealths of more detailed resources available. 
            </p></section>

            <section>
                <h3>ulimit</small></h3>

                <p>
                    Before you run your shell script (your WebSocket application) you should probably update your <em>ulimit</em>.
                    What is this?  It's a unix security feature that limits the number of open file descriptors one running process can have open at a time.
                    We want to increase this as each client connecting to your server opens a file descriptor. 
                    You should update this number to make sure the number of clients you expect never exceeds your ulimit.
                    Before you run you application make sure to execute this command:

                    <pre>$ ulimit -n 10000</pre>
                </p>
            </section>

            <section>
                <h3>LibEvent</small></h3>

                <p>
                    LibEvent is an asynchronous event driven C library that is meant to replace default event loop API on your system. 
                    It presents a common API that will utilize any event loop that your kernel uses. 
                    To set your system to use LibEvent you will need to install the system library, the development tools, and the PHP extension:
                </p>

                <pre>$ sudo apt-get install libevent libevent-dev
$ sudo pecl install libevent</pre>

                <p>
                    The event loop that PHP uses by default through stream_select uses the old, slow poll mechanism. 
                    By using LibEvent PHP will use the faster epoll or kqueue, drastically improving concurrency (the number of connections your server can handle, quickly). 
                    Once LibEvent is installed you don't need to change anything in your script. Ratchet's IoServer::factory will automatically use LibEvent if it's available. 
            </section>

            <section>
                <h3>Supervisor</h3>

                <p>
                    When running Ratchet in production it's highly recommended launching it from <a href="http://supervisord.org" target="_blank" rel="external">suporvisord</a>.
                    Suporvisor is a daemon that launches other processes and ensures they stay running.  
                    If for any reason your long running Ratchet application halted the supervisor daemon would ensure it starts back up immediately.
                </p>

                <p><pre class="prettyprint">[unix_http_server]
file = /tmp/supervisor.sock

[supervisord]
logfile          = ./logs/supervisord.log
logfile_maxbytes = 50MB
logfile_backups  = 10
loglevel         = info
pidfile          = /tmp/supervisord.pid
nodaemon         = false
minfds           = 1024
minprocs         = 200

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl = unix:///tmp/supervisor.sock

[program:ratchet]
command                 = bash -c "ulimit -n 10000 && /usr/bin/php ./bin/tutorial-terminal-chat.php"
process_name            = Ratchet
numprocs                = 1
autostart               = true
autorestart             = true
user                    = root
stdout_logfile          = ./logs/info.log
stdout_logfile_maxbytes = 1MB
stderr_logfile          = ./logs/error.log
stderr_logfile_maxbytes = 1MB</pre></p>

            <p>Supervisor can be installed with any of the following tools: pip, easy_install, apt-get, yum.</p>

            </section>

            <section>
                <h3>Server Configuration</h3>

                <p>There's a couple things you need to know when deploying a WebSocket server that impact how you set up your server architecture:</p>
                <ul>
                    <li>Neither Nginx nor Apache can handle or even pass-through WebSocket traffic (as of this writing)</li>
                    <li>Some aggressive proxies will block traffic that isn't on port 80 or 443 (not many, research your target audience)</li>
                </ul>

                <p>Given these issues with WebSockets we have three choices on how to architect:</p>
                <ul>
                    <li>Run your website and WebSocket server on the same machine using port 8080 for WebSockets and take the chance client proxies won't block traffic</li>
                    <li>Run your WebSocket server on its own server on port 80 under a subdomain (sock.example.com)</li>
                    <li>Put a reverse proxy (HAProxy or Varnish) in front of your webserver and WebSocket server</li>
                </ul>

                <p>
                    The first two options are fairly easy with the second being a decent option if you can afford a second server.
                    This article will detail the third option and show you how to configure your network, specifically HAProxy, to run your web and WebSocket servers on the same machine. 
                    We've chosen to demonstrate HAProxy because it can also handle SSL (in v1.5) where Varnish can not. 
                    The goal is to setup the architecutre like the diagram below.
                </p>

                <p>Reminder: insert image here</p>

                <p>
                    
                </p>
            </section>

        </div>
    </div>
{% endblock %}
