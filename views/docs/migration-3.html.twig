{% extends "layout.html.twig" %}

{% import "macros.html.twig" as m %}

{% block title %}A WebSocket's Lifecycle on your Web Site{% endblock %}

{% block description %}
  Long running, open ended connections work differently than Apache/Nginx CGI you may be used to
{% endblock %}

{% block body %}
  <div class="container-fluid">
    <div class="row-fluid">

    {{ m.menu() }}

    <div class="span9">
        <h2>Migrating<small> - from Ratchet/0.3</h2>

        <section id="http">
            <h3>Guzzle HTTP API replaced with PSR-7</h3>

            <p>
                Each client connection has a property with the initial HTTP request information. 
                <br />With 0.4 this property name has changed and its API has been replaced with a <a href="http://www.php-fig.org/psr/psr-7/#32-psrhttpmessagerequestinterface" rel="external">PSR-7</a> <em>Request</em> object.
            </p>

            In 0.3 your code would look like this:
            <pre class="prettyprint">
public function onOpen(ConnectionInterface $conn) {
    $ip = (string)$conn->WebSocket->request->getHeader('X-Forwarded-For');
}</pre>

            With 0.4 this should change to:
            <pre class="prettyprint">
public function onOpen(ConnectionInterface $conn) {
    $ip = $conn->httpRequest->getHeader('X-Forwarded-For');
}</pre>

            <p>Note: The 0.3 Guzzle API returned a Header object which had a <em>__toString</em> method whereas the the PSR-7 interface returns a <em>string</em>.</p>

            <p>If you previously were using the <em>getCookie</em> method of the request object it is no longer available in PSR-7. You will need to call <em>getHeader('Cookie')</em> and parse the string value yourself. One way to do this is with the <a rel="external" href="https://github.com/dflydev/dflydev-fig-cookies">FIG Cookies</a> library.
        </section>

        <section id="messagecomponent">
            <h3>Binary Messages</h3>

            <p>
                With Rathcet/0.4 binary messages are now optionally supported.
                A large effort was made to keep backwards compatability with 0.3 while introducing binary  messages. 
                This effort came at a tradeoff of cognitive complexity for those wishing to use the new binary API feature. 
                If you do not wish to support binary messages nothing has changed for you in 0.4. string values will continue to be sent to your onMessage methods inside your component. 

            </p>
            <p>
                If you wish to accept binary messages from clients your component interface will change slightly. 
                Instead of implementing a 
                <a href="/api/class-Ratchet.MessageComponentInterface.html"><i>Ratchet\MessageComponentInterface</i></a> 
                it should now implement a 
                <a href="/api/class-Ratchet.WebSocket.MessageComponentInterface.html"><i>\Ratchet\WebSocket\MessageComponentInterface</i></a>.
                Your component will now received 
                <a href="/api/class-Ratchet.RFC6455.Messaging.MessageInterface.html"><i>MessageInterface</i></a>
                objects instead of strings:
            </p>

            <pre class="prettyprint">
use Ratchet\ConnectionInterface;
use Ratchet\WebSocket\MessageComponentInterface;
use Ratchet\RFC6455\Messaging\MessageInterface;

class MyComponent implements MessageComponentInterface {
    public function onMessage(ConnectionInterface $from, MessageInterface $msg) {
    }

    ...
}</pre>
        </section>

        <section id="sessions">
            <h3>Session Component <small>interface change</small></h3>

            <p>
                The Session component used to implement the <em>WsServerInterface</em>. 
                It now (more logically) implements the <em>HttpServerInterface</em> as sessions are an HTTP concept, not a WebSocket concept. 
                This may or may not affect your code if you're using <em>SessionProvider</em>; you now must have it wrapped by <em>HttpServer</em>:
            </p>

            <pre class="prettyprint">
$server = new IoServer(
  new HttpServer(
    new SessionProvider(
      new WsServer(new MyApp),
      $provider
    )
  )
);</pre>
        </section>

        <section id="keepalive">
            <h3>Keep Alive <small>Heartbeat</small></h3>

            <p>
                Ratchet has long supported unsolicited ping requests but with 0.4 is now supports an (optional) active hearbeat monitor using WebSocket ping/pong frames.
                If you're using the <a href="/api/class-Ratchet.App.html">App class</a> it will be enabled automatically. If you're composing components yourself here's how to enable it on a 30 second timer:
            </p>

            <pre class="prettyprint">&lt;php
    $wsServer = new Ratchet\WebSocket\WsServer(new MyApp);

    $server = Ratchet\Server\IoServer::factory(
        new Ratchet\Http\HttpServer(
            $wsServer
        )
    );

    $wsServer->enableKeepAlive($server->loop, 30);

    $server->run();
</pre>
        </section>
    </div>
  </div>
{% endblock %}
